{"version":3,"sources":["components/StarWarsSketch.js","components/StyledComponents.js","components/DataInputForm.js","App.js","serviceWorker.js","index.js"],"names":["StarWarsSketch","props","Sketch","p5","textFont","titleFont","textX","textY","titleSize","textAlpha","preload","loadFont","setup","createCanvas","windowWidth","windowHeight","WEBGL","background","width","height","draw","fill","textSize","textAlign","CENTER","textLeading","text","titleText","rotateX","PI","summaryText","useEffect","url","playStatus","Sound","status","PLAYING","playFromPosition","StyledInputText","styled","input","StyledInputTextarea","textarea","MainContainer","div","FormContainer","FormInputContainer","FormSubmitContainer","StyledLabel","label","StyledErrorContainer","StyledSubmitButton","button","HeadingContainer","StyledHeading","h1","DataInputForm","starWarsSchema","Yup","shape","required","max","min","initialValues","onSubmit","onFormSubmitted","validationSchema","values","errors","isSubmitting","handleChange","handleBlur","handleSubmit","style","display","id","placeholder","type","onBlur","value","onChange","rows","disabled","App","useState","isStarted","setIsStarted","swTitle","setSwTitle","swSummary","setSwSummary","length","temp","split","join","toLowerCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8131b70.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport * as p5 from \"p5\";\nimport Sound from \"react-sound\";\n\nconst StarWarsSketch = props => {\n  const Sketch = p5 => {\n    let textFont;\n    let titleFont;\n    let textX;\n    let textY;\n    let titleSize;\n    let textAlpha;\n    p5.preload = () => {\n      textFont = p5.loadFont(\"./Starjedi.ttf\");\n      titleFont = p5.loadFont(\"./Starjhol.ttf\");\n    };\n    p5.setup = () => {\n      p5.createCanvas(p5.windowWidth, p5.windowHeight, p5.WEBGL);\n      p5.background(0);\n      textX = -p5.width / 2 + p5.width * 0.15;\n      textY = p5.height / 2;\n      titleSize = p5.width / 3;\n      textAlpha = 255;\n    };\n\n    p5.draw = () => {\n      p5.background(0);\n      p5.textFont(titleFont);\n      p5.fill(255, 232, 31);\n      p5.textSize(titleSize);\n      p5.textAlign(p5.CENTER);\n      p5.textLeading(titleSize);\n      p5.text(props.titleText, 0, 0);\n      if (titleSize < p5.width / 10) {\n        p5.fill(255, 232, 31, textAlpha);\n        p5.textFont(textFont);\n        p5.textSize(p5.width / 30);\n        p5.textAlign(p5.CENTER);\n        p5.rotateX(p5.PI / 4);\n        p5.textLeading(p5.width / 30);\n        p5.text(\n          props.summaryText,\n          textX,\n          textY,\n          p5.width * 0.7,\n          p5.height * 10\n        );\n        textY -= 1.5;\n        if (textY < -p5.width / 1.7) {\n          textAlpha -= 0.5;\n        }\n      }\n      if (titleSize > 0) {\n        titleSize--;\n      }\n    };\n  };\n\n  useEffect(() => {\n    new p5(Sketch);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <Sound\n        url=\"star-wars-intro-music.mp3\"\n        playStatus={Sound.status.PLAYING}\n        playFromPosition={0}\n      />\n    </div>\n  );\n};\n\nexport default StarWarsSketch;\n","import styled from \"styled-components\";\n\nexport const StyledInputText = styled.input`\n  border: 1px solid #ccc;\n  background-color: #f4f4f4;\n  padding: 15px 0px 15px 5px;\n  border-radius: 20px;\n  font-size: 18px;\n  width: 100%;\n  margin-top: 10px;\n`;\n\nexport const StyledInputTextarea = styled.textarea`\n  border: 1px solid #ccc;\n  background-color: #f4f4f4;\n  padding: 15px 0px 15px 5px;\n  border-radius: 20px;\n  font-size: 18px;\n  width: 100%;\n  margin-top: 10px;\n`;\n\nexport const MainContainer = styled.div`\n  width: 100%;\n`;\n\nexport const FormContainer = styled.div`\n  width: 45%;\n  margin: 50px auto;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nexport const FormInputContainer = styled.div`\n  width: 100%;\n  margin: 20px auto;\n`;\n\nexport const FormSubmitContainer = styled.div`\n  width: 100%;\n  text-align: center;\n`;\n\nexport const StyledLabel = styled.label`\n  color: white;\n  font-size: 21px;\n  font-weight: 700;\n`;\n\nexport const StyledErrorContainer = styled.div`\n  font-size: 16px;\n  color: red;\n  font-weight: 400;\n  margin: 10px;\n`;\n\nexport const StyledSubmitButton = styled.button`\n  width: 40%;\n  margin: auto;\n  font-size: 18px;\n  color: white;\n  background-color: #191919;\n  border-style: solid;\n  border-color: white;\n  border-width: 5px;\n  padding: 20px;\n  cursor: pointer;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nexport const HeadingContainer = styled.div`\n  text-align: center;\n  margin:30px;\n`;\nexport const StyledHeading = styled.h1`\n  color: #ffe81f;\n  font-size: 48px;\n`;","import React from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  FormContainer,\n  StyledInputText,\n  StyledInputTextarea,\n  StyledLabel,\n  FormInputContainer,\n  FormSubmitContainer,\n  StyledErrorContainer,\n  StyledSubmitButton\n} from \"./StyledComponents\";\n\nconst DataInputForm = props => {\n  const starWarsSchema = Yup.object().shape({\n    titleText: Yup.string()\n      .label(\"Title\")\n      .required(\"Empty title not allowed\")\n      .max(21, \"Title can be max 20 characters\"),\n    summaryText: Yup.string()\n      .label(\"Summary\")\n      .required()\n      .min(20, \"Summary must be at least 20 characters\")\n      .max(501, \"Summary can have 500 characters at maximum\")\n  });\n  return (\n    <Formik\n      initialValues={{ titleText: \"\", summaryText: \"\" }}\n      onSubmit={props.onFormSubmitted}\n      validationSchema={starWarsSchema}\n    >\n      {props => {\n        const {\n          values,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        } = props;\n        return (\n          <form onSubmit={handleSubmit}>\n            <FormContainer>\n              <FormInputContainer>\n                <StyledLabel style={{ display: \"block\" }}>Title</StyledLabel>\n                <StyledInputText\n                  id=\"titleText\"\n                  placeholder=\"Enter your desired title\"\n                  type=\"text\"\n                  onBlur={handleBlur}\n                  value={values.titleText}\n                  onChange={handleChange}\n                />\n              <StyledErrorContainer>{errors.titleText}</StyledErrorContainer>\n              </FormInputContainer>\n              <FormInputContainer>\n                <StyledLabel style={{ display: \"block\" }}>Summary</StyledLabel>\n                <StyledInputTextarea\n                  id=\"summaryText\"\n                  placeholder=\"Enter your summary\"\n                  type=\"text\"\n                  onBlur={handleBlur}\n                  value={values.summaryText}\n                  onChange={handleChange}\n                  rows={10}\n                />\n              <StyledErrorContainer>{errors.summaryText}</StyledErrorContainer>\n              </FormInputContainer>\n              <FormSubmitContainer>\n                  <StyledSubmitButton type=\"submit\" disabled={isSubmitting}>\n                    Start Crawling Intro\n                  </StyledSubmitButton>\n              </FormSubmitContainer>\n            </FormContainer>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default DataInputForm;\n","import React, { useState, useEffect } from \"react\";\nimport StarWarsSketch from \"./components/StarWarsSketch\";\nimport DataInputForm from \"./components/DataInputForm\";\nimport {\n  MainContainer,\n  StyledHeading,\n  HeadingContainer\n} from \"./components/StyledComponents\";\nfunction App() {\n  const [isStarted, setIsStarted] = useState(false);\n  const [swTitle, setSwTitle] = useState(\"\");\n  const [swSummary, setSwSummary] = useState(\"\");\n  useEffect(() => {\n    if (swTitle.length > 0 && swSummary.length > 0) {\n      setIsStarted(true);\n    }\n  }, [swSummary, swTitle]);\n  const onFormSubmitted = values => {\n    let temp = \"\";\n    temp = values.titleText.split(\" \");\n    temp = temp.join(\"\\n\");\n    temp = temp.toLowerCase();\n    setSwTitle(temp);\n    temp = values.summaryText.split(\"\\n\");\n    temp = temp.join(\"\\n\\n\\n\");\n    temp = temp.toLowerCase();\n    setSwSummary(temp);\n  };\n  return (\n    <MainContainer>\n      {!isStarted && (\n        <>\n          <HeadingContainer>\n            <StyledHeading>Star Wars Crawling Intro</StyledHeading>\n          </HeadingContainer>\n          <DataInputForm onFormSubmitted={onFormSubmitted} />\n        </>\n      )}\n      {isStarted && (\n        <StarWarsSketch titleText={swTitle} summaryText={swSummary} />\n      )}\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}